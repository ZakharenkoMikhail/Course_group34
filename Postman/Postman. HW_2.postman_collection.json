{
	"info": {
		"_postman_id": "2d4acd38-14e7-4a23-af21-0f1d17348c9e",
		"name": "Postman. HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21311160"
	},
	"item": [
		{
			"name": "1-first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2-user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request.\r",
							"pm.test(\"check user_name\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Misha\");\r",
							"    });\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request.\r",
							"let age_1 = +resp.age\r",
							"pm.test(\"check user_age\", function () {\r",
							"    pm.expect(age_1).to.eql(26);\r",
							"    });\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request.\r",
							"pm.test(\"check user_salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(600);\r",
							"    })\r",
							"\r",
							"//7. Спарсить request.\r",
							"let requ = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.).\r",
							"pm.test(\"Check user_name (name from request.)\", function (){\r",
							"pm.expect(resp.name).to.eql(requ.name)\r",
							"})\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request).\r",
							"let req_age_1 = +requ.age\r",
							"pm.test(\"Check user_age (age from request)\", function () {\r",
							"pm.expect(age_1).to.eql(req_age_1)\r",
							"})\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request).\r",
							"let req_salaru_1 = +requ.salary\r",
							"pm.test(\"Check user_salary (salary from request)\", function () {\r",
							"pm.expect(resp.salary).to.eql(req_salaru_1)\r",
							"})\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							" console.log(resp.family);\r",
							" \r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request).\r",
							"var salary4 = req_salaru_1 * 4\r",
							"pm.test(\"Check that u_salary_1_5_year in the answer is salary*4\", function () {\r",
							"pm.expect(resp.family.u_salary_1_5_year).to.eql(salary4)\r",
							"}) \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Misha",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "600",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3-object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"let requ = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request).\r",
							"pm.test(\"Check user_name (name from request)\", function () {\r",
							"pm.expect(resp.name).to.eql(requ.name)\r",
							"})\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request).\r",
							"pm.test(\"Check user_age (age from request)\", function () {\r",
							"pm.expect(resp.age).to.eql(requ.age)\r",
							"})\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request).\r",
							"let salary_1 = String(resp.salary)\r",
							"pm.test(\"Check user_salary (salary from request.)\", function () {\r",
							"pm.expect(resp.salary_1).to.eql(requ.salarye)\r",
							"})\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check that the 'dog' parameter has 'name' parameters\", function () {\r",
							"pm.expect(resp.family.pets.dog.hasOwnProperty(\"name\")).to.be.true\r",
							"})\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check that the 'dog' parameter has 'age' parameters\", function () {\r",
							"pm.expect(resp.family.pets.dog.hasOwnProperty(\"age\")).to.be.true\r",
							"})\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check that the 'name' parameter is set to 'Luky'\", function () {\r",
							"pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\")\r",
							"})\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check that the 'age' parameter is set to '4'\", function () {\r",
							"pm.expect(resp.family.pets.dog.age).to.eql(4)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Misha&age=26&salary=600",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Misha"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4-object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"\r",
							"//4. Спарсить request.\r",
							"let requ = pm.request.url.query.toObject()\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request).\r",
							"pm.test(\"Check user_name (name from request)\", function () {\r",
							"pm.expect(resp.name).to.eql(requ.name)\r",
							"})\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request).\r",
							"let age_1 = +requ.age\r",
							"pm.test(\"Check user_age (age from request)\", function () {\r",
							"pm.expect(resp.age).to.eql(age_1)\r",
							"})\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log (requ.salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log (resp.salary)\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log (resp.salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log (resp.salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log (resp.salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request).\r",
							"let salary_1 = +requ.salary\r",
							"pm.test(\"Check the 0th element of the salary parameter\", function () {\r",
							"pm.expect(resp.salary[0]).to.eql(salary_1)\r",
							"})\r",
							"\r",
							"//13.Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request).\r",
							"let salary_2 = String(requ.salary*2)\r",
							"pm.test(\"Check the 1th element of the salary parameter\", function () {\r",
							"pm.expect(resp.salary[1]).to.eql(salary_2)\r",
							"})\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let salary_3 = String(requ.salary*3)\r",
							"pm.test(\"Check the 2th element of the salary parameter\", function () {\r",
							"pm.expect(resp.salary[2]).to.eql(salary_3)\r",
							"})\r",
							"\r",
							"//18. Передать в окружение переменную name.\r",
							"pm.environment.set(\"name\", resp.name);\r",
							"\r",
							"//19. Передать в окружение переменную age.\r",
							"pm.environment.set(\"age\", resp.age);\r",
							"\r",
							"//20. Передать в окружение переменную salary.\r",
							"pm.environment.set(\"salary\", resp.salary[0])\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < resp.salary.length; i++){ \r",
							"    console.log((resp.salary[i]));\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Misha&age=26&salary=600",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Misha"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5-user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"\r",
							"//7. Спарсить request.\r",
							"let requ = request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary.\r",
							"pm.test(\"Check, that json response has start_qa_salary parameter\",\r",
							"function () {\r",
							"pm.expect(resp.hasOwnProperty(\"start_qa_salary\")).to.be.true\r",
							"})\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months.\r",
							"pm.test(\"Check, that json response has qa_salary_after_6_months parameter\",\r",
							"function () {\r",
							"pm.expect(resp.hasOwnProperty(\"qa_salary_after_6_months\")).to.be.true\r",
							"})\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months.\r",
							"pm.test(\"Check, that json response has qa_salary_after_12_months parameter\",\r",
							"function () {\r",
							"pm.expect(resp.hasOwnProperty(\"qa_salary_after_12_months\")).to.be.true\r",
							"})\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year.\r",
							"pm.test(\"Check, that json response has qa_salary_after_1.5_year parameter\",\r",
							"function () {\r",
							"pm.expect(resp.hasOwnProperty(\"qa_salary_after_1.5_year\")).to.be.true\r",
							"})\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years.\r",
							"pm.test(\"Check, that json response has qa_salary_after_3.5_years parameter\",\r",
							"function () {\r",
							"pm.expect(resp.hasOwnProperty(\"qa_salary_after_3.5_years\")).to.be.true\r",
							"})\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person.\r",
							"pm.test(\"Check, that json response has 'person' parameter\",\r",
							"function () {\r",
							"pm.expect(resp.hasOwnProperty(\"person\")).to.be.true\r",
							"})\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request).\r",
							"let salary_1 = +requ.salary\r",
							"pm.test(\"Check, start_qa_salary equals salary from request\",\r",
							"function () {\r",
							"pm.expect(resp.start_qa_salary).to.eql(salary_1)\r",
							"})\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request).\r",
							"pm.test(\"Check, qa_salary_after_6_months equals salary*2 from request\",\r",
							"function () {\r",
							"pm.expect(resp.qa_salary_after_6_months).to.eql(salary_1*2)\r",
							"})\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check, qa_salary_after_12_months equals salary*2.7 from request\",\r",
							"function () {\r",
							"pm.expect(resp.qa_salary_after_12_months).to.eql(salary_1*2.7)\r",
							"})\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request).\r",
							"pm.test(\"Check, qa_salary_after_1.5_year equals salary*3.3 from request\",\r",
							"function () {\r",
							"pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(salary_1*3.3)\r",
							"})\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request).\r",
							"pm.test(\"Check, qa_salary_after_3.5_years equals salary*3.8 from request\",\r",
							"function () {\r",
							"pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(salary_1*3.8)\r",
							"})\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request).\r",
							"pm.test(\"Check, person parameter, 1st element from u_name is equal to salary from request\",\r",
							"function () {\r",
							"pm.expect(resp.person.u_name[1]).to.eql(salary_1)\r",
							"})\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request).\r",
							"let age_1 = +requ.age\r",
							"pm.test(\"Check, parameter u_age equal age from request\",\r",
							"function () {\r",
							"pm.expect(resp.person.u_age).to.eql(age_1)\r",
							"})\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request).\r",
							"pm.test(\"Check, parameter u_salary_5_years equal salary*4.2 from request\",\r",
							"function () {\r",
							"pm.expect(resp.person.u_salary_5_years).to.eql(salary_1*4.2)\r",
							"})\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in resp.person){  \r",
							"    console.log(\"Property:\", i, \"property value:\",resp.person[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}